
openapi: 3.0.3
info:
  title: POS Admin API
  description: API for POS Admin dashboard to manage products, orders, employees, and settings
  version: 1.0.0
servers:
  - url: https://api.posadmin.com/v1
    description: Production server
  - url: https://staging-api.posadmin.com/v1
    description: Staging server
  - url: http://localhost:8080/api/v1
    description: Local development

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        sku:
          type: string
        stock:
          type: integer
        imageUrl:
          type: string
        status:
          type: string
          enum: [active, inactive, out_of_stock]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - price
        - status
    
    Order:
      type: object
      properties:
        id:
          type: string
        orderNumber:
          type: string
        customerId:
          type: string
        customerName:
          type: string
        customerEmail:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, cancelled]
        total:
          type: number
          format: float
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        paymentStatus:
          type: string
          enum: [pending, paid, refunded, failed]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - orderNumber
        - status
        - total
        - items
        - paymentStatus
        - createdAt
    
    OrderItem:
      type: object
      properties:
        productId:
          type: string
        productName:
          type: string
        quantity:
          type: integer
        unitPrice:
          type: number
          format: float
        totalPrice:
          type: number
          format: float
      required:
        - productId
        - productName
        - quantity
        - unitPrice
        - totalPrice
    
    Employee:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [Store Manager, Cashier, Sales Associate, Inventory Manager]
        status:
          type: string
          enum: [Active, On Leave, Inactive]
        joinDate:
          type: string
          format: date
        phoneNumber:
          type: string
        address:
          type: string
      required:
        - id
        - name
        - email
        - role
        - status
        - joinDate
    
    SalesStats:
      type: object
      properties:
        totalSales:
          type: number
          format: float
        ordersCount:
          type: integer
        averageOrderValue:
          type: number
          format: float
        period:
          type: string
          enum: [daily, weekly, monthly, yearly]
      required:
        - totalSales
        - ordersCount
        - averageOrderValue
        - period
    
    Settings:
      type: object
      properties:
        storeName:
          type: string
        storeEmail:
          type: string
        storePhone:
          type: string
        storeAddress:
          type: string
        taxRate:
          type: number
          format: float
        currencyCode:
          type: string
        logoUrl:
          type: string
        operatingHours:
          type: object
          additionalProperties:
            type: string
      required:
        - storeName
        - storeEmail
        - currencyCode

paths:
  /auth/login:
    post:
      summary: Authenticate a user
      description: Login with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /dashboard/stats:
    get:
      summary: Get dashboard statistics
      description: Retrieve statistical data for the dashboard
      tags:
        - Dashboard
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period for the stats
          schema:
            type: string
            enum: [daily, weekly, monthly, yearly]
            default: daily
        - name: fromDate
          in: query
          description: Start date for custom period
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          description: End date for custom period
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Dashboard stats returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  salesStats:
                    $ref: '#/components/schemas/SalesStats'
                  topProducts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  recentOrders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products:
    get:
      summary: List all products
      description: Retrieve a list of all products with pagination
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          description: Search term for product name or SKU
          schema:
            type: string
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      pages:
                        type: integer
                      current:
                        type: integer
                      limit:
                        type: integer
    post:
      summary: Create a new product
      description: Add a new product to the inventory
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                category:
                  type: string
                sku:
                  type: string
                stock:
                  type: integer
                status:
                  type: string
                  enum: [active, inactive, out_of_stock]
                image:
                  type: string
                  format: binary
              required:
                - name
                - price
                - category
                - sku
                - stock
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{productId}:
    get:
      summary: Get a single product
      description: Retrieve a product by its ID
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a product
      description: Modify an existing product
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                category:
                  type: string
                sku:
                  type: string
                stock:
                  type: integer
                status:
                  type: string
                  enum: [active, inactive, out_of_stock]
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product
      description: Remove a product from the inventory
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    get:
      summary: List all orders
      description: Retrieve a list of all orders with pagination
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
        - name: fromDate
          in: query
          description: Filter orders from date
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          description: Filter orders to date
          schema:
            type: string
            format: date
        - name: search
          in: query
          description: Search by order number or customer name
          schema:
            type: string
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      pages:
                        type: integer
                      current:
                        type: integer
                      limit:
                        type: integer
    post:
      summary: Create a new order
      description: Create a new customer order
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerId:
                  type: string
                customerName:
                  type: string
                customerEmail:
                  type: string
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: integer
                    required:
                      - productId
                      - quantity
              required:
                - customerName
                - items
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{orderId}:
    get:
      summary: Get a single order
      description: Retrieve an order by its ID
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an order
      description: Modify an existing order
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, processing, completed, cancelled]
                paymentStatus:
                  type: string
                  enum: [pending, paid, refunded, failed]
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: integer
                    required:
                      - productId
                      - quantity
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /employees:
    get:
      summary: List all employees
      description: Retrieve a list of all employees with pagination
      tags:
        - Employees
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          description: Search by employee name or email
          schema:
            type: string
        - name: role
          in: query
          description: Filter by role
          schema:
            type: string
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
      responses:
        '200':
          description: List of employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      pages:
                        type: integer
                      current:
                        type: integer
                      limit:
                        type: integer
    post:
      summary: Create a new employee
      description: Add a new employee to the system
      tags:
        - Employees
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [Store Manager, Cashier, Sales Associate, Inventory Manager]
                status:
                  type: string
                  enum: [Active, On Leave, Inactive]
                joinDate:
                  type: string
                  format: date
                phoneNumber:
                  type: string
                address:
                  type: string
              required:
                - name
                - email
                - role
                - status
                - joinDate
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /employees/{employeeId}:
    get:
      summary: Get a single employee
      description: Retrieve an employee by their ID
      tags:
        - Employees
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Employee details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an employee
      description: Modify an existing employee
      tags:
        - Employees
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [Store Manager, Cashier, Sales Associate, Inventory Manager]
                status:
                  type: string
                  enum: [Active, On Leave, Inactive]
                phoneNumber:
                  type: string
                address:
                  type: string
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an employee
      description: Remove an employee from the system
      tags:
        - Employees
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Employee deleted successfully
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /settings:
    get:
      summary: Get store settings
      description: Retrieve all store settings
      tags:
        - Settings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Store settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
    put:
      summary: Update store settings
      description: Modify store settings
      tags:
        - Settings
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
